import open3d as o3d
import numpy as np
import matplotlib.pyplot as plt
def check_point_cloud_size(pcd):
    if len(pcd.points) < 3:
        raise ValueError(
            "Point cloud does not contain enough points for plane segmentation.")
file_path = r"C:\Users\anito\OneDrive\Desktop\ml project\Mercedes-Benz CLK 430 Convertible.ply"
try:
    pcd = o3d.io.read_point_cloud(file_path)
except Exception as e:
    print(f"Error loading point cloud file: {e}")
    exit()
check_point_cloud_size(pcd)
pcd = pcd.voxel_down_sample(voxel_size=0.05)
pcd, ind = pcd.remove_statistical_outlier(nb_neighbors=20, std_ratio=2.0)
check_point_cloud_size(pcd)
try:
    plane_model, inliers = pcd.segment_plane(distance_threshold=0.02,
                                             ransac_n=3,
                                             num_iterations=1000)
except Exception as e:
    print(f"Error during plane segmentation: {e}")
    exit()
[a, b, c, d] = plane_model
inlier_cloud = pcd.select_by_index(inliers)
outlier_cloud = pcd.select_by_index(inliers, invert=True)
walls = outlier_cloud.select_by_index(
    np.where(np.asarray(outlier_cloud.points)[:, 2] > 0.1)[0])
points_floor = np.asarray(inlier_cloud.points)
points_walls = np.asarray(walls.points)
points_floor_2d = points_floor[:, :2]
points_walls_2d = points_walls[:, :2]
plt.figure(figsize=(10, 10))
plt.scatter(points_floor_2d[:, 0],
            points_floor_2d[:, 1], s=1, c='blue', label='Floor')
plt.scatter(points_walls_2d[:, 0],
            points_walls_2d[:, 1], s=1, c='red', label='Walls')
plt.title('2D Floor Plan')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.axis('equal')
plt.show()
